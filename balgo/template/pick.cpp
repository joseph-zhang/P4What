/**
*    Pick定理给出了一种在特定情况下计算多边形面积的方法.
*    定理指出,如果一个多边形的顶点都落在格点上,那么该多边形的面积有公式:
*    多边形面积(S) = 多边形内部格点数(a) + 多边形边界上格点数的一半(b/2) - 1 
*    是一个十分好用的定理.
*    对于网格上的某线段e,设其两端点是(x1,y1),(x2,y2),则落在e上的格点数是gcd(|x2-x1|,|y2-y1|)-1 (不计端点)
*    推论:全部顶点都在格点上的正多边形，只有正方形一种
*    Pick定理有许多有趣的应用,下面就简要介绍几个.
*/

//算算边界上有多少格点
int count(Point* ploy,int n){
	for(int i = 0;i < n;i++){
		int j = (i==n-1)?0:i+1;
		int e1 = abs(Ploy[i].x-ploy[j].x);
		int e2 = abs(ploy[i].y-ploy[j].y);
		res+= gcd(e1,e2);
	}
	return res;
}
/**
*    Pick定理的应用(1)
*    考虑直线x+y=n，其中n是素数。这条直线将恰好通过第一象限里的n-1个格点.
*    将这n-1个点分别和原点相连,得到的n-2个三角形内部的格点数是相同的.
*/

/**
*    Pick定理的应用(2)
*    Farey序列是指把在0到1之间的所有分母不超过n的分数从小到大排列起来所形成的数列,记为F(n).
*    例如F(5):0/1, 1/5, 1/4, 1/3, 2/5, 1/2, 3/5, 2/3, 3/4, 4/5, 1/1
*    有一个神奇的性质:前一项的分母乘以后一项的分子，一定比前一项的分子与后一项分母之积大1.
*    考虑一根从原点出发的射线由x轴正方向逆时针慢慢转动到y轴正方向，这根射线依次撞到的标记点恰好就是一个Farey序列.
*    因为Farey序列相当于是给每个标记点的斜率排序.
*    由于分数都是最简分数，因此它们与原点的连线上没有格点=>
*    这根射线撞过的两个相邻的标记点，它们与原点所组成的三角形面积一定为1/2.    
*/

//利用Pick定理解决视线遮挡问题
void count(){
    //先设一个界maxa进行预处理
	for(int i = 1;i < maxa;i++){
		for(int j = i;j < maxa;j++)
			lookup[i][j] = lookup[j][i] = gcd(i,j);
	}
	//在第一象限的b×a网格中(左下角是(1,1))有多少可见点.
	//对于点(i,j),若i和j互素那么该点可见.
	for(int i = 1;i <= a;i++){
		res += phi[i]*(b/i);//phi是欧拉φ函数
		for(int j = 1;j <= b%i;j++)
			if(lookup[i][j]== 1)res+=1;
	}
}